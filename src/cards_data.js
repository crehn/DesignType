
function refLink(type, abbreviation, name, set, notes) {
    return {
        type: type,
        abbreviation: abbreviation,
        name: name,
        set: set,
		notes: notes
    };
}

var cardsData = {
    KISS: {
		abbreviation: 'KISS',
        name: 'Keep it Simple Stupid',
        aspect: 'simple',
		aspectIcon: '/img/cardset/icons/coat_simple.png',
        catchphrase: 'Simple means readable, maintainable and less error-prone. Overengineering is harmful.',
        description: "Complex code typically contains more bugs and it has to be maintained (maybe even by other people). To others it may seem obscure which can lead to frustration and bad code quality. Striving for simplicity means to avoid inheritance, low-level optimization, complex algorithms, fancy (language) features, configurability, etc.",
        pathToPicture: "/img/cardset/KISS.png",
		set: 'basic',
		setIcon: '/img/cardset/icons/basic_simplepowerful.png',
		principlesWikiUrl: "http://principles-wiki.net/principles:keep_it_simple_stupid",
		commentId: "c_kiss",
        links: [
            refLink('↑', 'CF', 'Customer Focus', 'basic', 'ToDo'),
            refLink('↓', 'RoP', 'Rule of Power', 'basic', 'ToDo'),
            refLink('↓', 'NFR', 'Non-Functional Requirements', 'advanced', 'ToDo'),
            refLink('↓', 'LC', 'Low Coupling', 'basic', 'ToDo'),
        ],
    },
    YAGNI: {
        abbreviation: 'YAGNI',
        name: 'You Ain’t Gonna Need It',
        aspect: 'simple',
        aspectIcon: '/img/cardset/icons/coat_simple.png',
        catchphrase: 'It’s currently not necessary, and we even have to maintain it!',
        description: "Code needs to be maintained. The more you have, the more complexity there will be. Adding features and capabilities that are not used (yet), wastes time twice: When you write the code and when you change or just read it. This becomes even more painful when you finally try to remove this dead code. So avoid runtime-configuration, premature optimization, and features that are only there “for the sake of completeness”. If they are needed, add them later.",
        pathToPicture: "/img/cardset/YAGNI.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_simplepowerful.png',
        principlesWikiUrl: "http://principles-wiki.net/principles:you_ain_t_gonna_need_it",
        commentId: "c_yagni",
        links: [
            refLink('↑', 'CF', 'Customer Focus', 'basic', 'ToDo'),
            refLink('↓', 'PSPG', 'A Penny Saved Is a Penny Got', 'advanced', 'ToDo'),
            refLink('↓', 'TP', 'Technological Progress', 'advanced', 'ToDo'),
            refLink('⇅', 'FP', 'Flexibility Principle', 'advanced', 'ToDo'),
        ],
    },
    EUHM: {
        abbreviation: 'EUHM',
        name: 'Easy to Use and Hard to Misuse',
        aspect: 'simple',
        aspectIcon: '/img/cardset/icons/coat_simple.png',
        catchphrase: 'It shouldn’t require much discipline or special knowledge to use or extend that module.',
        description: "Some day there will be a new colleague who hasn’t read the docs. Some day it will be Friday evening right before the deadline. No matter how disciplined or smart you are, some day somebody will cut corners. So better have the obvious way of usage be the correct one. Have the compiler or the unit tests fail in case of errors and keep sure that changing a module does not require much understanding.",
        pathToPicture: "/img/cardset/EUHM.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_simplepowerful.png',
        principlesWikiUrl: "http://principles-wiki.net/principles:easy_to_use_and_hard_to_misuse",
        commentId: "c_euhm",
        links: [
            refLink('↑', 'ML', 'Murphy’s Law', 'basic', 'ToDo'),
            refLink('↑', 'PSU', 'Principle of Separate Understandability', 'advanced', 'ToDo'),
            refLink('↑', 'UP', 'Uniformity Principle', 'advanced', 'ToDo'),
            refLink('⇅', 'KISS', 'Keep It Simple Stupid', 'basic', 'ToDo'),
        ],
    },
    RoE: {
        abbreviation: 'RoE',
        name: 'Rule of Explicitness',
        aspect: 'simple',
        aspectIcon: '/img/cardset/icons/coat_simple.png',
        catchphrase: 'Explicit solutions are less error-prone and easier to understand and debug.',
        description: "Implicit solutions require the developer to have a deeper understanding of the module, as it is necessary to “read between the lines”. Explicit solutions are less error-prone and easier to maintain. So better avoid configurability, unnecessary abstractions and indirection (events, listeners, observers, etc.).",
        pathToPicture: "/img/cardset/RoE.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_simplepowerful.png',
        principlesWikiUrl: "http://principles-wiki.net/principles:rule_of_explicitness",
        commentId: "c_roe",
        links: [
            refLink('↑', 'KISS', 'Keep It Simple Stupid', 'basic', 'ToDo'),
            refLink('↓', 'RoP', 'Rule of Power', 'basic', 'ToDo'),
            refLink('↓', 'LC', 'Low Coupling', 'basic', 'ToDo'),
            refLink('⇅', 'FP', 'Flexibility Principle', 'advanced', 'ToDo'),
        ],
    },
    RoP: {
        abbreviation: 'RoP',
        name: 'Rule of Power',
        aspect: 'powerful',
        aspectIcon: '/img/cardset/icons/coat_powerful.png',
        catchphrase: 'Foresighted, generic solutions are reusable and future requirements will be addressed, too.',
        description: "A powerful solution is better than a less potent one. Foresighted solutions reduce the necessity of refactoring and are more stable over time. Generic solutions often need less code and additionally offer extensibility by design. So better use abstractions, indirection, GoF patterns, polymorphism, etc.",
        pathToPicture: "/img/cardset/RoP.png",
        set: 'basic',
        setIcon: '/img/cardset/icons/basic_simplepowerful.png',
        principlesWikiUrl: "http://principles-wiki.net/principles:rule_of_power",
        commentId: "c_rop",
        links: [
            refLink('↑', 'FP', 'Flexibility Principle', 'advanced', 'ToDo'),
            refLink('↑', 'DRY', 'Don’t Repeat Yourself', 'basic', 'ToDo'),
            refLink('↓', 'YAGNI', 'You Ain’t Gonna Need It', 'advanced', 'ToDo'),
            refLink('↓', 'CF', 'Customer Focus', 'basic', 'ToDo'),
        ],
    },
    FP: {
        abbreviation: 'FP',
        name: 'Flexibility Principle',
        aspect: 'powerful',
        aspectIcon: '/img/cardset/icons/coat_powerful.png',
        catchphrase: 'short',
        description: "long",
        pathToPicture: "/img/cardset/FP.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_simplepowerful.png',
        principlesWikiUrl: "none",
        commentId: "c_fp",
        links: [
            refLink('↑', 'RoP', 'Rule of Power', 'basic', 'ToDo'),
            refLink('↑', 'LC', 'Low Coupling', 'basic', 'ToDo'),
            refLink('↑', 'ML', 'Murphy’s Law', 'basic', 'ToDo'),
            refLink('↓', 'ICC', 'In the Concrete Case', 'advanced', 'ToDo'),
        ],
    },
    NFR: {
        abbreviation: 'NFR',
        name: 'Non-Functional Requirements',
        aspect: 'powerful',
        aspectIcon: '/img/cardset/icons/coat_powerful.png',
        catchphrase: 'We have to think about NFRs now. Adding these qualities later will be very hard.',
        description: "Software needs to be efficient, scalable, secure, usable, maintainable, testable, resilient, reliable, compliant with (data privacy) regulations, etc. These qualities have a huge impact on the architecture. You might need to choose certain technologies for performance, use microservices for scalability, or provide redundant subsystems for reliability. Thinking about this later results in waste and additional cost/effort.",
        pathToPicture: "/img/cardset/NFR.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_simplepowerful.png',
        principlesWikiUrl: "none",
        commentId: "c_nfr",
        links: [
            refLink('↑', 'ML', 'Murphy’s Law', 'basic', 'ToDo'),
            refLink('↓', 'YAGNI', 'You Ain’t Gonna Need It', 'advanced', 'ToDo'),
            refLink('↓', 'KISS', 'Keep It Simple Stupid', 'basic', 'ToDo'),
            refLink('⇅', 'FP', 'Flexibility Principle', 'advanced', 'ToDo'),
        ],
    },
    ECV: {
        abbreviation: 'ECV',
        name: 'Encapsulate the Concept that Varies',
        aspect: 'powerful',
        aspectIcon: '/img/cardset/icons/coat_powerful.png',
        catchphrase: 'short',
        description: "long",
        pathToPicture: "/img/cardset/ECV.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_simplepowerful.png',
        principlesWikiUrl: "http://principles-wiki.net/principles:encapsulate_the_concept_that_varies",
        commentId: "c_ecv",
        links: [
            refLink('↑', 'RoP', 'Rule of Power', 'basic', 'ToDo'),
            refLink('↑', 'IH/E', 'Information Hiding/Encapsulation', 'advanced', 'ToDo'),
            refLink('↓', 'YAGNI', 'You Ain’t Gonna Need It', 'advanced', 'ToDo'),
            refLink('↓', 'RoE', 'Rule of Explicitness', 'advanced', 'ToDo'),
        ],
    },
    LC: {
        abbreviation: 'LC',
        name: 'Low Coupling',
        aspect: 'abstract',
        aspectIcon: '/img/cardset/icons/coat_abstract.png',
        catchphrase: 'Tight coupling creates ripple-effects and makes the code less maintainable.',
        description: "If you decouple, you don’t need to know internal details about other parts of the system. Furthermore, it makes you independent of changes in those other parts and it even enables reuse. So better reduce the number of dependencies and assumptions about other modules, use narrow interfaces, additional layers, indirection, dependency injection, observers, messaging, etc.",
        pathToPicture: "/img/cardset/LC.png",
        set: 'basic',
        setIcon: '/img/cardset/icons/basic_abstractconcrete.png',
        principlesWikiUrl: "http://principles-wiki.net/principles:low_coupling",
        commentId: "c_lc",
        links: [
            refLink('↑', 'FP', 'Flexibility Principle', 'advanced', 'ToDo'),
            refLink('↑', 'ML', 'Murphy’s Law', 'basic', 'ToDo'),
            refLink('↓', 'KISS', 'Keep It Simple Stupid', 'basic', 'ToDo'),
            refLink('⇅', 'SRP', 'Single Responsibility Principle', 'advanced', 'ToDo'),
        ],
    },
    SRP: {
        abbreviation: 'SRP',
        name: 'Single Responsibility Principle',
        aspect: 'abstract',
        aspectIcon: '/img/cardset/icons/coat_abstract.png',
        catchphrase: 'One module should do one thing only.',
        description: "If there is more than one reason to change a certain module (method/class/artifact/...), i.e. the module has more than one responsibility, then code becomes fragile. Changing one responsibility may result in involuntary changes to the other. Furthermore, changing the module is more difficult and takes more time. And even when you don’t change the module at all, understanding it is more complex. So better separate concerns into separate modules.",
        pathToPicture: "/img/cardset/SRP.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_abstractconcrete.png',
        principlesWikiUrl: "http://principles-wiki.net/principles:low_coupling",
        commentId: "c_srp",
        links: [
            refLink('↑', 'PSU', 'Principle of Separate Understandability', 'advanced', 'ToDo'),
            refLink('↑', 'IOSP', 'Integration Operation Segregation Principle', 'advanced', 'ToDo'),
            refLink('⇅', 'LC', 'Low Coupling', 'basic', 'ToDo'),
            refLink('⇅', 'KISS', 'Keep It Simple Stupid', 'basic', 'ToDo'),
        ],
    },
    ADP: {
        abbreviation: 'ADP',
        name: 'Acyclic Dependencies Principle',
        aspect: 'abstract',
        aspectIcon: '/img/cardset/icons/coat_abstract.png',
        catchphrase: 'Cyclic dependencies create rigid structures.',
        description: "Cyclic dependencies result in all sorts of nasty consequences: tight couplings, deadlocks, infinite recursions, ripple effects, bad maintainability, etc. The larger the cycle, the worse the consequences will get and the harder they are to understand and to break apart. So avoid them by using dependency inversion, publish-subscribe mechanisms or just by assigning responsibilities to modules hierarchically.",
        pathToPicture: "/img/cardset/ADP.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_abstractconcrete.png',
        principlesWikiUrl: "none",
        commentId: "c_adp",
        links: [
            refLink('↑', 'LC', 'Low Coupling', 'basic', 'ToDo'),
            refLink('↑', 'ML', 'Murphy’s Law', 'basic', 'ToDo'),
            refLink('↓', 'RoE', 'Rule of Explicitness', 'advanced', 'ToDo'),
            refLink('↓', 'ICC', 'In the Concrete Case', 'advanced', 'ToDo'),
        ],
    },
     IOSP: {
         abbreviation: 'IOSP',
         name: 'Integration Operation Segregation Principle',
         aspect: 'abstract',
         aspectIcon: '/img/cardset/icons/coat_abstract.png',
         catchphrase: 'A module should either contain business logic or integrate other modules but not both.',
         description: "Either a module (method/class/...) is an operation, i.e. it contains business logic and/or API calls or it is an integration, i.e. it calls other modules. That means operations should never call other modules and integrations should have no business logic and no API calls. Operations are easy to read, test, and reuse. And integrations are very simple, too. This ensures that modules are small and systems well-structured.",
         pathToPicture: "/img/cardset/IOSP.png",
         set: 'advanced',
         setIcon: '/img/cardset/icons/advanced_abstractconcrete.png',
         principlesWikiUrl: "none",
         commentId: "c_iosp",
         links: [
             refLink('↑', 'LC', 'Low Coupling', 'basic', 'ToDo'),
             refLink('↑', 'SRP', 'Single Responsibility Principle', 'advanced', 'ToDo'),
             refLink('⇅', 'KISS', 'Keep It Simple Stupid', 'basic', 'ToDo'),
             refLink('⇅', 'PSU', 'Principle of Separate Understandability', 'advanced', 'ToDo'),
         ],
     },
    DRY: {
        abbreviation: 'DRY',
        name: 'Don’t Repeat Yourself',
        aspect: 'concrete',
        aspectIcon: '/img/cardset/icons/coat_concrete.png',
        catchphrase: 'Duplication makes changing the code cumbersome and leads to bugs.',
        description: "Having a functionality more than once means to update or bugfix it at every occurrence which is more error-prone and more effort. Refactorings like method or class extraction may help as well as inheritance, higher-order functions, polymorphism, and some design patterns.",
        pathToPicture: "/img/cardset/DRY.png",
        set: 'basic',
        setIcon: '/img/cardset/icons/basic_abstractconcrete.png',
        principlesWikiUrl: "http://principles-wiki.net/principles:don_t_repeat_yourself",
        commentId: "c_dry",
        links: [
            refLink('↑', 'RoP', 'Rule of Power', 'basic', 'ToDo'),
            refLink('↑', 'PoQ', 'Principle of Quality', 'basic', 'ToDo'),
            refLink('↓', 'KISS', 'Keep It Simple Stupid', 'basic', 'ToDo'),
            refLink('↓', 'PSU', 'Principle of Separate Understandability', 'advanced', 'ToDo'),
        ],
    },
    IH_E: {
        abbreviation: 'IH/E',
        name: 'Information Hiding/Encapsulation',
        aspect: 'concrete',
        aspectIcon: '/img/cardset/icons/coat_concrete.png',
        catchphrase: 'Only what is hidden, can be changed without risk.',
        description: "There are 3 levels of IH/E: 1) Having a capsule means, that you have methods for accessing the data of the module. 2) Making the capsule opaque means that you can only access the data through the methods (i.e. all fields are private). 3) Making the capsule impenetrable means that you avoid returning references to mutable internal data structures. Either you make them immutable or you create copies in getter/setter methods.",
        pathToPicture: "/img/cardset/IH_E.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_abstractconcrete.png',
        principlesWikiUrl: "http://principles-wiki.net/principles:information_hiding_encapsulation",
        commentId: "c_ihe",
        links: [
            refLink('↑', 'MP', 'Model Principle', 'advanced', 'ToDo'),
            refLink('↑', 'Low Coupling', 'basic', 'ToDo'),
            refLink('↑', 'FP', 'Flexibility Principle', 'advanced', 'ToDo'),
            refLink('⇅', 'KISS', 'Keep It Simple Stupid', 'basic', 'ToDo'),
        ],
    },
    PSU: {
        abbreviation: 'PSU',
        name: 'Principle of Separate Understandability',
        aspect: 'concrete',
        aspectIcon: '/img/cardset/icons/coat_concrete.png',
        catchphrase: 'You shouldn’t need to know other parts for understanding this one.',
        description: "Each module (method/class/artifact/service/...) should be understandable on its own. Understanding becomes a lot more difficult if you cannot apply divide and conquer. Furthermore, if something is not separately understandable, this typically means either that a part of the functionality does not belong here or the module has the wrong abstraction.",
        pathToPicture: "/img/cardset/PSU.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_abstractconcrete.png',
        principlesWikiUrl: "http://principles-wiki.net/principles:principle_of_separate_understandability",
        commentId: "c_psu",
        links: [
            refLink('↑', 'LC', 'Low Coupling', 'basic', 'ToDo'),
            refLink('↑', 'MP', 'Model Principle', 'advanced', 'ToDo'),
            refLink('↑', 'ML', 'Murphy’s Law', 'basic', 'ToDo'),
            refLink('⇅', 'TdA/IE', 'Tell don’t Ask/Information Expert', 'advanced', 'ToDo'),
        ],
    },
    TdA_IE: {
        abbreviation: 'TdA/IE',
        name: 'Tell don’t Ask/Information Expert',
        aspect: 'concrete',
        aspectIcon: '/img/cardset/icons/coat_concrete.png',
        catchphrase: 'Functionality should be where the data is.',
        description: "Instead of asking a module for data, processing it, and putting it back afterwards, better just delegate. This reduces complexity in those modules which are already large (and may even become god classes). So avoid getters and setters in favor of methods containing domain logic. In other words: Logic should be implemented in that module that already has the necessary data, that is the information expert.",
        pathToPicture: "/img/cardset/TdA_IE.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_abstractconcrete.png',
        principlesWikiUrl: "http://principles-wiki.net/principles:tell_don_t_ask_information_expert",
        commentId: "c_tdaie",
        links: [
         refLink('↑', 'IH/E', 'Information Hiding/Encapsulation', 'advanced', 'ToDo'),
         refLink('↓', 'PSU', 'Principle of Separate Understandability', 'advanced', 'ToDo'),
         refLink('⇅', 'SRP', 'Single Responsibility Principle', 'advanced', 'ToDo'),
         refLink('⇅', 'LC', 'Low Coupling', 'basic', 'ToDo'),
        ],
    },
    CF: {
        abbreviation: 'CF',
        name: 'Customer Focus',
        aspect: 'pragmatic',
        aspectIcon: '/img/cardset/icons/coat_pragmatic.png',
        catchphrase: 'This is not what the customer pays us for!',
        description: "If something is not requested, there has to be a very good reason to do it. Anything in addition costs additional time (also for removing or maintaining it). It creates the additional risk of more bugs and makes you responsible for it. Continuously remember what was requested e.g. by looking into the requirements or asking the customer.",
        pathToPicture: "/img/cardset/CF.png",
        set: 'basic',
        setIcon: '/img/cardset/icons/basic_pragmaticidealistic.png',
        principlesWikiUrl: "none",
        commentId: "c_cf",
        links: [
            refLink('↑', 'EaO', 'Early and Often', 'advanced', 'ToDo'),
            refLink('↑', 'YAGNI', 'You Ain’t Gonna Need It', 'advanced', 'ToDo'),
            refLink('↓', 'PoQ', 'Principle of Quality', 'basic', 'ToDo'),
            refLink('⇅', 'FP', 'Flexibility Principle', 'advanced', 'ToDo'),
        ],
    },
    ICC: {
        abbreviation: 'ICC',
        name: 'In the Concrete Case',
        aspect: 'pragmatic',
        aspectIcon: '/img/cardset/icons/coat_pragmatic.png',
        catchphrase: 'Your arguments are valid but in the concrete case the advantages won’t be important.',
        description: "Many arguments hold true in general but when we look at the decision to be made, the effects they describe are sometimes negligible. Yes, low coupling is important, uniformity is helpful, and flexibility is desirable. But these aspects are sometimes crucial and sometimes irrelevant. So better focus on arguments that are relevant in the concrete case instead of insisting on aspects just to satisfy idealistic pettiness.",
        pathToPicture: "/img/cardset/ICC.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_pragmaticidealistic.png',
        principlesWikiUrl: "none",
        commentId: "c_icc",
        links: [
            refLink('↑', 'CF', 'Customer Focus', 'basic', 'ToDo'),
            refLink('↑', 'YAGNI', 'You Ain’t Gonna Need It', 'advanced', 'ToDo'),
            refLink('↓', 'PoQ', 'Principle of Quality', 'basic', 'ToDo'),
            refLink('↓', 'PSPG', 'A Penny Saved Is a Penny Got', 'advanced', 'ToDo'),
        ],
    },
    EaO: {
        abbreviation: 'EaO',
        name: 'Early and Often',
        aspect: 'pragmatic',
        aspectIcon: '/img/cardset/icons/coat_pragmatic.png',
        catchphrase: 'Going online soon means to get value and feedback soon.',
        description: "Business success is often built on being faster than competitors. Building minimum viable products and 80%-solutions facilitate a faster time to market. Moreover the best feedback for improvement comes after a release and is rarely designed up front. So avoid perfectionism, release early and often, and accept a certain amount of technical debt.",
        pathToPicture: "/img/cardset/EaO.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_pragmaticidealistic.png',
        principlesWikiUrl: "none",
        commentId: "c_eao",
        links: [
            refLink('↑', 'FRD', 'Frequency Reduces Difficulty', 'advanced', 'ToDo'),
            refLink('↑', 'TP', 'Technological Progress', 'basic', 'ToDo'),
            refLink('⇅', 'PoQ', 'Principle of Quality', 'basic', 'ToDo'),
            refLink('⇅', 'IR', 'Instability Risk', 'advanced', 'ToDo'),
        ],
    },
    UFT: {
        abbreviation: 'UFT',
        name: 'Use Familiar Technology',
        aspect: 'pragmatic',
        aspectIcon: '/img/cardset/icons/coat_pragmatic.png',
        catchphrase: 'Using well-known technology results in faster outcome and fewer time-consuming bugs.',
        description: "Well known technologies are easier to handle because you can focus on the job and you know all the pitfalls. If you use unfamiliar technology, you most likely won’t do that well at first. This results in even more bugs and worse design. So better use those technologies that all (current and future) developers are most familiar with.",
        pathToPicture: "/img/cardset/UFT.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_pragmaticidealistic.png',
        principlesWikiUrl: "none",
        commentId: "c_uft",
        links: [
            refLink('↑', 'UP', 'Uniformity Principle', 'advanced', 'ToDo'),
            refLink('↑', 'IR', 'Instability Risk', 'advanced', 'ToDo'),
            refLink('↓', 'TP', 'Technological Progress', 'basic', 'ToDo'),
            refLink('⇅', 'ML', 'Murphy’s Law', 'basic', 'ToDo'),
        ],
    },
    PoQ: {
        abbreviation: 'PoQ',
        name: 'Principle of Quality',
        aspect: 'idealistic',
        aspectIcon: '/img/cardset/icons/coat_idealistic.png',
        catchphrase: 'Bad quality kills us in the long run!',
        description: "It may be faster now, but we need to be fast tomorrow, too. Bad quality frustrates maintainers, makes fixing bugs harder and leads to huge efforts for changes. This often starts by being careless once. Don’t let a vicious circle begin. Use metrics, adhere to the architecture, have a high test coverage, apply code reviews and refactor continuously. Don’t be lazy.",
        pathToPicture: "/img/cardset/PoQ.png",
        set: 'basic',
        setIcon: '/img/cardset/icons/basic_pragmaticidealistic.png',
        principlesWikiUrl: "none",
        commentId: "c_poq",
        links: [
            refLink('↑', 'LC', 'Low Coupling', 'basic', 'ToDo'),
            refLink('↑', 'ML', 'Murphy’s Law', 'basic', 'ToDo'),
            refLink('↓', 'CF', 'Customer Focus', 'basic', 'ToDo'),
            refLink('⇅', 'EaO', 'Early and Often', 'advanced', 'ToDo'),
        ],
    },
    UP: {
        abbreviation: 'UP',
        name: '',
        aspect: 'idealistic',
        aspectIcon: '/img/cardset/icons/coat_idealistic.png',
        catchphrase: 'Solve similar problems in the same way.',
        description: "Following UP reduces the number of different solutions. There are fewer concepts to learn, fewer problems to solve and fewer kinds of defects that can occur. So have a consistent structure, a consistent naming scheme and use the same mechanisms and libraries everywhere. Prefer using the same approaches and not just similar ones as subtle differences lead to bugs.",
        pathToPicture: "/img/cardset/UP.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_pragmaticidealistic.png',
        principlesWikiUrl: "http://principles-wiki.net/principles:uniformity_principle",
        commentId: "c_up",
        links: [
            refLink('↑', 'ML', 'Murphy’s Law', 'basic', 'ToDo'),
            refLink('↑', 'RoS', 'Rule of Standardization', 'advanced', 'ToDo'),
            refLink('↓', 'ICC', 'In the Concrete Case', 'advanced', 'ToDo'),
            refLink('⇅', 'KISS', 'Keep It Simple Stupid', 'basic', 'ToDo'),
        ],
    },
    MP: {
        abbreviation: 'MP',
        name: 'Model Principle',
        aspect: 'idealistic',
        aspectIcon: '/img/cardset/icons/coat_idealistic.png',
        catchphrase: 'Program close to the problem domain.',
        description: "Software should model and mirror the concepts and actions of the real world. So avoid everything that works “accidentally”. If it works accidentally, it breaks accidentally. So be precise with semantics. If you need to delete an order in a data migration routine, call deleteOrder and not cancelOrder—even if that currently does the same. cancelOrder might get enhanced such that it creates a reverse order which wouldn’t be correct for data migration anymore.",
        pathToPicture: "/img/cardset/MP.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_pragmaticidealistic.png',
        principlesWikiUrl: "http://principles-wiki.net/principles:model_principle",
        commentId: "c_mp",
        links: [
            refLink('↑', 'ML', 'Murphy’s Law', 'basic', 'ToDo'),
            refLink('↑', 'TdA/IE', 'Tell don’t Ask/Information Expert', 'advanced', 'ToDo'),
            refLink('⇅', 'KISS', 'Keep It Simple Stupid', 'basic', 'ToDo'),
            refLink('⇅', 'ADP', 'Acyclic Dependencies Principle', 'advanced', 'ToDo'),
        ],
    },
    PSPG: {
        abbreviation: 'PSPG',
        name: 'A Penny Saved Is a Penny Got',
        aspect: 'idealistic',
        aspectIcon: '/img/cardset/icons/coat_idealistic.png',
        catchphrase: 'It might not be a big advantage, but it’s not a big cost either.',
        description: "Making little improvements a habit sums up to a big advantage. This is the reason behind the boy scout rule (“Leave the campground cleaner than you’ve found it”). You don’t have to clean the whole forest but if everyone leaves the campground just a little cleaner, we will have a clean forest in the end. So if it’s not a big deal, update libraries, improve documentation, and refactor the modules you are currently touching anyway.",
        pathToPicture: "/img/cardset/PSPG.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_pragmaticidealistic.png',
        principlesWikiUrl: "none",
        commentId: "c_pspg",
        links: [
            refLink('↑', 'PoQ', 'Principle of Quality', 'basic', 'ToDo'),
            refLink('↑', 'EaO', 'Early and Often', 'advanced', 'ToDo'),
            refLink('↑', 'FRD', 'Frequency Reduces Difficulty', 'advanced', 'ToDo'),
            refLink('↓', 'CF', 'Customer Focus', 'basic', 'ToDo'),
        ],
    },
    ML: {
        abbreviation: 'ML',
        name: 'Murphy’s Law',
        aspect: 'robust',
        aspectIcon: '/img/cardset/icons/coat_robust.png',
        catchphrase: 'Avoid possibilities for something to go wrong or to get misused.',
        description: "If there is a possibility for something to be used in the wrong way (like supplying parameters in the wrong order), it will eventually happen. So better avoid possible future bugs by using defensive programming, immutability, a common naming scheme, avoiding duplication and complexity.",
        pathToPicture: "/img/cardset/ML.png",
        set: 'basic',
        setIcon: '/img/cardset/icons/basic_robusttechnologic.png',
        principlesWikiUrl: "http://principles-wiki.net/principles:model_principle",
        commentId: "c_ml",
        links: [
            refLink('↑', 'FF', 'Fail fast', 'advanced', 'ToDo'),
            refLink('↑', 'EUHM', 'Easy to Use and Hard to Misuse', 'advanced', 'ToDo'),
            refLink('↓', 'ICC', 'In the Concrete Case', 'advanced', 'ToDo'),
            refLink('⇅', 'KISS', 'Keep It Simple Stupid', 'basic', 'ToDo'),
        ],
    },
    IR: {
        abbreviation: 'IR',
        name: 'Instability Risk',
        aspect: 'robust',
        aspectIcon: '/img/cardset/icons/coat_robust.png',
        catchphrase: 'Bleeding edge often leads to blood and pain.',
        description: "New technology often comes with teething problems. Using too unstable software, beta versions of libraries, or anything that hasn’t stood the test of time is risky. There may be unknown bugs, nasty little quirks and compatibility issues no one has heard of, yet. This also means that if you encounter these problems, you will be one of the first to face them.",
        pathToPicture: "/img/cardset/IR.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_robusttechnologic.png',
        principlesWikiUrl: "none",
        commentId: "c_ir",
        links: [
            refLink('↑', 'RoS', 'Rule of Standardization', 'advanced', 'ToDo'),
            refLink('↑', 'UFT', 'Use Familiar Technology', 'advanced', 'ToDo'),
            refLink('↓', 'TP', 'Technological Progress', 'basic', 'ToDo'),
            refLink('↓', 'FRD', 'Frequency Reduces Difficulty', 'advanced', 'ToDo'),
        ],
    },
    FF: {
        abbreviation: 'FF',
        name: 'Fail fast',
        aspect: 'robust',
        aspectIcon: '/img/cardset/icons/coat_robust.png',
        catchphrase: 'Program defensively or you’ll have a hard time debugging.',
        description: "If you don’t check your inputs, cascading failures can occur. This results in security problems and error messages which are hard to decipher because they are not thrown at the position of the actual fault. This may even lead to situations where teams have to investigate failures which are not theirs. So log and throw an error as soon as you realize a problem. The earlier the better, so throwing a compile-time error is preferable to runtime checks.",
        pathToPicture: "/img/cardset/FF.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_robusttechnologic.png',
        principlesWikiUrl: "http://principles-wiki.net/principles:fail_fast",
        commentId: "c_ff",
        links: [
            refLink('↑', 'ML', 'Murphy’s Law', 'basic', 'ToDo'),
            refLink('↑', 'EUHM', 'Easy to Use and Hard to Misuse', 'advanced', 'ToDo'),
            refLink('↓', 'KISS', 'Keep It Simple Stupid', 'basic', 'ToDo'),
            refLink('⇅', 'NFR', 'Non-Functional Requirements', 'advanced', 'ToDo'),
        ],
    },
    RoS: {
        abbreviation: 'RoS',
        name: 'Rule of Standardization',
        aspect: 'robust',
        aspectIcon: '/img/cardset/icons/coat_robust.png',
        catchphrase: 'Adhering to standards makes systems easier to understand and reduces bugs.',
        description: "Sticking to standards reduces complexity. If you are familiar with the standard, understanding systems that adhere to it will be much easier. Also, standards ensure a certain degree of interoperability and maturity. So use standard technologies, standard architectures, standard coding styles, standard formatting, standardized checklists, etc. If there are no formal standards, create your own in-house standard.",
        pathToPicture: "/img/cardset/RoS.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_robusttechnologic.png',
        principlesWikiUrl: "none",
        commentId: "c_ros",
        links: [
            refLink('↑', 'DRW', 'Don’t Reinvent the Wheel', 'advanced', 'ToDo'),
            refLink('↓', 'NFR', 'Non-Functional Requirements', 'advanced', 'ToDo'),
            refLink('↓', 'KISS', 'Keep It Simple Stupid', 'basic', 'ToDo'),
            refLink('⇅', 'TP', 'Technological Progress', 'basic', 'ToDo'),
        ],
    },
    TP: {
        abbreviation: 'TP',
        name: 'Technological Progress',
        aspect: 'technologic',
        aspectIcon: '/img/cardset/icons/coat_technologic.png',
        catchphrase: 'Progress must not be ignored in a competitive environment.',
        description: "New technology is not only motivating but also comes with benefits like more features, more performance, better maintainability, and fixed bugs. Furthermore, old technology won’t be supported for much longer and new people don’t know the old stuff anymore. Continuously challenge existing solutions by evaluating alternatives.",
        pathToPicture: "/img/cardset/TP.png",
        set: 'basic',
        setIcon: '/img/cardset/icons/basic_robusttechnologic.png',
        principlesWikiUrl: "none",
        commentId: "c_XXX",
        links: [
            refLink('↑', 'FRD', 'Frequency Reduces Difficulty', 'advanced', 'ToDo'),
            refLink('↓', 'IR', 'Instability Risk', 'advanced', 'ToDo'),
            refLink('↓', 'UFT', 'Use Familiar Technology', 'advanced', 'ToDo'),
            refLink('⇅', 'RoS', 'Rule of Standardization', 'advanced', 'ToDo'),
        ],
    },
    FRD: {
        abbreviation: 'FRD',
        name: 'Frequency Reduces Difficulty',
        aspect: 'technologic',
        aspectIcon: '/img/cardset/icons/coat_technologic.png',
        catchphrase: 'If it hurts, do it more often!',
        description: "Typically, it’s easier and less effort to go small steps continuously than to wait until there is a huge gap to bridge. The pain will be bigger the more you postpone it—break the cycle and update to new versions, refactor regularly, merge and release early and often. Doing something more often, leads to more practice and fewer mistakes.",
        pathToPicture: "/img/cardset/FRD.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_robusttechnologic.png',
        principlesWikiUrl: "none",
        commentId: "c_frd",
        links: [
            refLink('↑', 'ML', 'Murphy’s Law', 'basic', 'ToDo'),
            refLink('↑', 'EaO', 'Early and Often', 'advanced', 'ToDo'),
            refLink('↓', 'IR', 'Instability Risk', 'advanced', 'ToDo'),
            refLink('↓', 'ICC', 'In the Concrete Case', 'advanced', 'ToDo'),
        ],
    },
    DRW: {
        abbreviation: 'DRW',
        name: 'Don’t Reinvent the Wheel',
        aspect: 'technologic',
        aspectIcon: '/img/cardset/icons/coat_technologic.png',
        catchphrase: 'Focus on real challenges instead of old ones.',
        description: "If something has already been solved, it’s probably solved in a better way than we will manage to do in the time we have. No one would ever reimplement a cache or a search algorithm except it is one’s core competency. So focus on the challenges of your core business and use standards, libraries, and frameworks. They are the core business of those people who create and maintain them. They’ve solved many problems that we haven’t even thought of, yet.",
        pathToPicture: "/img/cardset/DRW.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_robusttechnologic.png',
        principlesWikiUrl: "none",
        commentId: "c_drw",
        links: [
            refLink('↑', 'EbE', 'Experience by Experiments', 'advanced', 'ToDo'),
            refLink('↓', 'LC', 'Low Coupling', 'basic', 'ToDo'),
            refLink('↓', 'ICC', 'In the Concrete Case', 'advanced', 'ToDo'),
            refLink('⇅', 'RoS', 'Rule of Standardization', 'advanced', 'ToDo'),
        ],
    },
    EbE: {
        abbreviation: 'EbE',
        name: 'Experience by Experiments',
        aspect: 'technologic',
        aspectIcon: '/img/cardset/icons/coat_technologic.png',
        catchphrase: 'We’ll never know if we don’t try!',
        description: "Discussing advantages and disadvantages theoretically can be helpful but at a certain point you will never know which variant is better if you don’t try. So if you have a standard solution to a problem, try the other one. Carefully but regularly try out new frameworks and libraries, new coding guidelines, architectural/design patterns etc. in real-world projects. Failed experiments will be refactored and successful experiments will stay and become the new standard.",
        pathToPicture: "/img/cardset/EbE.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_robusttechnologic.png',
        principlesWikiUrl: "none",
        commentId: "c_ebe",
        links: [
            refLink('↑', 'TP', 'Technological Progress', 'basic', 'ToDo'),
            refLink('↓', 'IR', 'Instability Risk', 'advanced', 'ToDo'),
            refLink('↓', 'CF', 'Customer Focus', 'basic', 'ToDo'),
            refLink('⇅', 'FP', 'Flexibility Principle', 'advanced', 'ToDo'),
        ],
    },
    qFoc: {
        abbreviation: 'qFoc',
        name: 'Focus',
        aspect: 'question',
        aspectIcon: '/img/cardset/icons/coat_question.png',
        catchphrase: 'Are we still on the right track or have we lost focus?',
        description: "Discussions are weird sometimes. You start with the clear aim to decide whether solution A or B is better and end up with a discussion on something completely different. You easily get lost in side issues or you heavily argue on something unimportant (“bike-shedding”). So clarify the main topic of your discussion and keep the focus on it.",
        pathToPicture: "/img/cardset/qFoc.png",
        set: 'basic',
        setIcon: '/img/cardset/icons/basic_actionquestionquestion.png',
        principlesWikiUrl: "none",
        commentId: "c_qfoc",
        links: "",
    },
    qTS: {
        abbreviation: 'qTS',
        name: 'Third Solution',
        aspect: 'question',
        aspectIcon: '/img/cardset/icons/coat_question.png',
        catchphrase: 'Are we discussing all relevant possibilities?',
        description: "Sometimes we argue heavily if solution A or B is better when in fact there is a third solution C that may be preferable. So regularly ask yourself (and your colleagues) whether there is a solution that needs to be discussed, too.",
        pathToPicture: "/img/cardset/qTS.png",
        set: 'basic',
        setIcon: '/img/cardset/icons/basic_actionquestionquestion.png',
        principlesWikiUrl: "none",
        commentId: "c_qts",
        links: "",
    },
    qTRT: {
        abbreviation: 'qTRT',
        name: 'The Right Time',
        aspect: 'question',
        aspectIcon: '/img/cardset/icons/coat_question.png',
        catchphrase: 'What will happen if we don’t decide right now?',
        description: "A design decision should be taken as late in the project as possible. But it’s likewise harmful to take it too late. In order to find out if a decision really needs to be made now, think about what will happen, if the decision is deferred.",
        pathToPicture: "/img/cardset/qTRT.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_actionquestionquestion.png',
        principlesWikiUrl: "none",
        commentId: "c_qtrt",
        links: "",
    },
    qSta: {
        abbreviation: 'qSta',
        name: 'Stakeholders',
        aspect: 'question',
        aspectIcon: '/img/cardset/icons/coat_question.png',
        catchphrase: 'Do we have the needs of all stakeholders in mind?',
        description: "Some decisions have influence on many stakeholders—some of which are often forgotten. Also, think about QA, Ops, etc.",
        pathToPicture: "/img/cardset/qSta.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_actionquestionquestion.png',
        principlesWikiUrl: "none",
        commentId: "c_qsta",
        links: "",
    },
    qCon: {
        abbreviation: 'qCon',
        name: 'Consequences',
        aspect: 'question',
        aspectIcon: '/img/cardset/icons/coat_question.png',
        catchphrase: 'What will happen if we make the wrong decision?',
        description: "Think about possible impacts, chances of occurrence, and possibilities to revert. If the consequences are not bad at all, then it might be better to shorten the discussion. If the consequences are severe, there should be some means of mitigation in place. In any case think about the consequences of a decision.",
        pathToPicture: "/img/cardset/qCon.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_actionquestionquestion.png',
        principlesWikiUrl: "none",
        commentId: "c_qcon",
        links: "",
    },
    qMU: {
        abbreviation: 'qMU',
        name: 'Mutual Understanding',
        aspect: 'question',
        aspectIcon: '/img/cardset/icons/coat_question.png',
        catchphrase: 'Do we really understand each other’s points of view?',
        description: "Sometimes a discussion gets stuck because of misunderstandings or misinterpretations. Commonly that’s because everyone is busy explaining their own point of view without trying to understand the other. If that’s the case, it is necessary to realize that. Otherwise, there will be no progress in the discussion.",
        pathToPicture: "/img/cardset/qMU.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_actionquestionquestion.png',
        principlesWikiUrl: "none",
        commentId: "c_qmu",
        links: "",
    },
    qFS: {
        abbreviation: 'qFS',
        name: 'From Scratch',
        aspect: 'question',
        aspectIcon: '/img/cardset/icons/coat_question.png',
        catchphrase: '"What would be the “real solution” if we’d start from scratch?',
        description: "Often the solutions we come up with are tied to the current state of the software. Our thinking is restricted such that we do not consider certain possibilities. In such cases it is helpful to neglect the circumstances of the current system for a moment—think outside the box. Even if the greenfield solution you then come up with is not directly applicable, it’s often a starting point for an alternative.",
        pathToPicture: "/img/cardset/qFS.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_actionquestionquestion.png',
        principlesWikiUrl: "none",
        commentId: "c_qfs",
        links: "",
    },
    qBSU: {
        abbreviation: 'qBSU',
        name: 'Best Solution for the User',
        aspect: 'question',
        aspectIcon: '/img/cardset/icons/coat_question.png',
        catchphrase: 'Do we really address the real user’s needs?',
        description: "Not in every case the person who specifies what to do is identical to the user of the system. Wrong interpretations or misunderstandings may lead to unsuitable solutions that do not satisfy the real user’s needs. Every now and then, you should ask yourself if you are still designing a system that really helps those who will eventually use it.",
        pathToPicture: "/img/cardset/qBSU.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_actionquestionquestion.png',
        principlesWikiUrl: "none",
        commentId: "c_qbsu",
        links: "",
    },
    aMed: {
        abbreviation: 'aMed',
        name: 'Mediator',
        aspect: 'action',
        aspectIcon: '/img/cardset/icons/coat_action.png',
        catchphrase: 'We cannot agree. Let’s get some help!',
        description: "Sometimes a discussion gets stuck. In these cases it is often advisable to ask another colleague for an opinion or mediation. Usually a colleague who hasn’t already participated in the discussion, adds a new, unbiased perspective.",
        pathToPicture: "/img/cardset/aMed.png",
        set: 'basic',
        setIcon: '/img/cardset/icons/basic_actionquestion.png',
        principlesWikiUrl: "none",
        commentId: "c_amed",
        links: "",
    },
    aTD: {
        abbreviation: 'aTD',
        name: 'Team Decision',
        aspect: 'action',
        aspectIcon: '/img/cardset/icons/coat_action.png',
        catchphrase: 'The decision is too important to take alone. Let’s have the whole team decide!',
        description: "Important decisions which affect many people like architectural decisions, big refactorings, and external APIs should be taken by the whole team. First, this typically results in better decisions. Second, the team will be much more committed to the decision. And third this fosters knowledge transfer.",
        pathToPicture: "/img/cardset/aTD.png",
        set: 'basic',
        setIcon: '/img/cardset/icons/basic_actionquestion.png',
        principlesWikiUrl: "none",
        commentId: "c_atd",
        links: "",
    },
    aDaC: {
        abbreviation: 'aDaC',
        name: 'Divide and Conquer',
        aspect: 'action',
        aspectIcon: '/img/cardset/icons/coat_action.png',
        catchphrase: 'Actually we are mixing up two aspects or two decisions. Let’s discuss them separately.',
        description: "Design decisions get complicated or stuck if there is actually more than one decision to make. The discussion shifts from one topic to the other and back again. This gets even worse if nobody realizes that there is actually more than one problem. Step back, find out which decisions or problems there are and discuss them separately.",
        pathToPicture: "/img/cardset/aDaC.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_actionquestion.png',
        principlesWikiUrl: "none",
        commentId: "c_adac",
        links: "",
    },
    aRes: {
        abbreviation: 'aRes',
        name: 'Research',
        aspect: 'action',
        aspectIcon: '/img/cardset/icons/coat_action.png',
        catchphrase: 'Let’s have a look if there is already a suitable solution.',
        description: "When making a decision, make sure that you know all relevant solutions. Many problems have already been solved. So before inventing an own algorithm, have a look at libraries and scientific papers. For certain design decisions have a look at standards and patterns. Also, consider researching code snippets for common programming issues. Maybe there is even commercial-off-the-shelf (COTS) or open-source software you can leverage.",
        pathToPicture: "/img/cardset/aRes.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_actionquestion.png',
        principlesWikiUrl: "none",
        commentId: "c_ares",
        links: "",
    },
    aFC: {
        abbreviation: 'aFC',
        name: 'Flip a Coin',
        aspect: 'action',
        aspectIcon: '/img/cardset/icons/coat_action.png',
        catchphrase: 'That’s not worth the discussion!',
        description: "In some cases the difference between several solutions is negligible. Or both the solutions have their pros and cons without one being superior to the other. It is then better to just take the decision by flipping a coin than to waste time in a lengthy and pointless discussion.",
        pathToPicture: "/img/cardset/aFC.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_actionquestion.png',
        principlesWikiUrl: "none",
        commentId: "c_afc",
        links: "",
    },
    aDA: {
        abbreviation: 'aDA',
        name: 'Devil’s Advocate',
        aspect: 'action',
        aspectIcon: '/img/cardset/icons/coat_action.png',
        catchphrase: 'There is no real discussion, and we risk missing a point. Let’s appoint a devil’s advocate.',
        description: "Sometimes you agree too fast on a solution—probably because you all have a similar way of thinking. In such a case you can appoint someone who has to argue against that solution. A similar problem occurs when none of you has a strong tendency towards any of the solutions. In such a case, for each solution appoint a representative who tries to argument for this and against the other solutions.",
        pathToPicture: "/img/cardset/aDA.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_actionquestion.png',
        principlesWikiUrl: "none",
        commentId: "c_ada",
        links: "",
    },
    aPO: {
        abbreviation: 'aPO',
        name: 'Product Owner Decides',
        aspect: 'action',
        aspectIcon: '/img/cardset/icons/coat_action.png',
        catchphrase: 'This has a significant impact on the business, so we have to talk with the product owner.',
        description: "Some technical decisions influence the product itself. Often there is an impact on cost and time and sometimes there are even legal issues. Trade-offs include hosting an application in the cloud (flexibility and time vs. privacy and cost), adding a caching layer (performance vs. complexity and cost), make-or-buy (time vs. flexibility and cost), etc. In those cases the decision is not merely a technical one. Involve the PO.",
        pathToPicture: "/img/cardset/aPO.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_actionquestion.png',
        principlesWikiUrl: "none",
        commentId: "c_apo",
        links: "",
    },
    aCD: {
        abbreviation: 'aCD',
        name: 'Client Decides',
        aspect: 'action',
        aspectIcon: '/img/cardset/icons/coat_action.png',
        catchphrase: 'The client who calls the API knows best how the ideal API should look like.',
        description: "APIs need to be intuitive to those who use it and sometimes it’s hard to predict if that’s the case. Some decisions have an impact on how a module can be used. Some use cases may get simpler and others may get harder and less intuitive. Better stop assuming you know what’s best for the clients. Just ask and involve them in your decision.",
        pathToPicture: "/img/cardset/aCD.png",
        set: 'advanced',
        setIcon: '/img/cardset/icons/advanced_actionquestion.png',
        principlesWikiUrl: "none",
        commentId: "c_acd",
        links: "",
    },
    J: {
        abbreviation: 'J',
        name: 'Joker',
        aspect: 'joker',
        aspectIcon: '/img/cardset/icons/coat_joker.png',
        catchphrase: "I don't have a card for this but let me explain.",
        description: "That's OK. Don't feel restricted in the arguments you use as long it's a valid one. Maybe you don't find the corresponding card fast enough, maybe the card is not in your deck or maybe there is no card for your argument. Never mind: If it's convincing, use it. Nevertheless, limit yourself to a single and graspable argument.",
        pathToPicture: "/img/cardset/J.png",
        set: 'basic',
        setIcon: '/img/cardset/icons/basic_joker.png',
        principlesWikiUrl: "none",
        commentId: "c_joker",
        links: "",
    },
};

